C51 COMPILER V9.53.0.0   PWM                                                               10/26/2018 16:11:19 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN PWM.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PWM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<reg51.h>
   2          
   3          sbit PWM_Pin = P2^0;       // Pin P2.0 is named as PWM_Pin
   4           
   5          // Function declarations
   6          void cct_init(void);
   7          void InitTimer0(void);
   8          void InitPWM(void);
   9           
  10          // Global variables
  11          unsigned char PWM = 0;    // It can have a value from 0 (0% duty cycle) to 255 (100% duty cycle)
  12          unsigned int temp = 0;    // Used inside Timer0 ISR
  13           
  14          // PWM frequency selector
  15          /* PWM_Freq_Num can have values in between 1 to 257 only
  16           * When PWM_Freq_Num is equal to 1, then it means highest PWM frequency
  17           * which is approximately 1000000/(1*255) = 3.9kHz
  18           * When PWM_Freq_Num is equal to 257, then it means lowest PWM frequency
  19           * which is approximately 1000000/(257*255) = 15Hz
  20           *
  21           * So, in general you can calculate PWM frequency by using the formula
  22           *     PWM Frequency = 1000000/(PWM_Freq_Num*255)
  23           */
  24          #define PWM_Freq_Num   1   // Highest possible PWM Frequency
  25           
  26           
  27          // Main Function
  28          int main(void)
  29          {
  30   1         cct_init();           // Make all ports zero
  31   1         InitPWM();              // Start PWM
  32   1       
  33   1         PWM = 250;              // Make 50% duty cycle of PWM
  34   1       
  35   1         while(1)                // Rest is done in Timer0 interrupt
  36   1         {}
  37   1      }
  38           
  39          // Init CCT function
  40          void cct_init(void)
  41          {
  42   1        P0 = 0x00;   
  43   1        P1 = 0x00;   
  44   1        P2 = 0x00;   
  45   1        P3 = 0x00;  
  46   1      }
  47           
  48          // Timer0 initialize
  49          void InitTimer0(void)
  50          {
  51   1        TMOD &= 0xF0;    // Clear 4bit field for timer0
  52   1        TMOD |= 0x01;    // Set timer0 in mode 1 = 16bit mode
  53   1        
  54   1        TH0 = 0x00;      // First time value
  55   1        TL0 = 0x00;      // Set arbitrarily zero
C51 COMPILER V9.53.0.0   PWM                                                               10/26/2018 16:11:19 PAGE 2   

  56   1        
  57   1        ET0 = 1;         // Enable Timer0 interrupts
  58   1        EA  = 1;         // Global interrupt enable
  59   1        
  60   1        TR0 = 1;         // Start Timer 0
  61   1      }
  62           
  63          // PWM initialize
  64          void InitPWM(void)
  65          {
  66   1        PWM = 0;         // Initialize with 0% duty cycle
  67   1        InitTimer0();    // Initialize timer0 to start generating interrupts
  68   1                 // PWM generation code is written inside the Timer0 ISR
  69   1      }
  70           
  71          // Timer0 ISR
  72          void Timer0_ISR (void) interrupt 1   
  73          {
  74   1        TR0 = 0;    // Stop Timer 0
  75   1       
  76   1        if(PWM_Pin) // if PWM_Pin is high
  77   1        {
  78   2          PWM_Pin = 0;
  79   2          temp = (255-PWM)*PWM_Freq_Num;
  80   2          TH0  = 0xFF - (temp>>8)&0xFF;
  81   2          TL0  = 0xFF - temp&0xFF;  
  82   2        }
  83   1        else       // if PWM_Pin is low
  84   1        {
  85   2          PWM_Pin = 1;
  86   2          temp = PWM*PWM_Freq_Num;
  87   2          TH0  = 0xFF - (temp>>8)&0xFF;
  88   2          TL0  = 0xFF - temp&0xFF;
  89   2        }
  90   1       
  91   1        TF0 = 0;     // Clear the interrupt flag
  92   1        TR0 = 1;     // Start Timer 0
  93   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    110    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
